#+TITLE: smRen's Literate Emacs config
#+AUTHOR: smRen
#+EMAIL: smakey18@gmail.com
#+STARTUP: content

* Overview

Configuration file for emacs using literate programming.


* General Settings

** Startup behavior

Disable startup message and remove initial scratch message

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+end_src

Start window maximized (Can also be set by operating system like KDE!)

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Program behavior

Restart emacs

#+begin_src emacs-lisp
  (define-key global-map "\M-c" nil)
  (use-package restart-emacs
    :ensure t
    :bind (("M-c" . restart-emacs)))
#+end_src

Stop getting prompts about killing a buffer with a live process

#+begin_src emacs-lisp
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
	   kill-buffer-query-functions))
#+end_src

y or n instead of yes or no

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Change intro message

#+begin_src emacs-lisp
  (defun display-startup-echo-area-message ()
    (message "Welcome elite hacker"))
#+end_src


* User Interface

** Themes

Color scheme

#+begin_src emacs-lisp
  (use-package ayu-theme
    :ensure t
    :config
    (load-theme 'ayu-dark t))
#+end_src

Modeline

#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    (telephone-line-mode 1))
  (setq telephone-line-lhs
	'((evil   . (telephone-line-evil-tag-segment))
	  (accent . (telephone-line-vc-segment
		     telephone-line-erc-modified-channels-segment
		     telephone-line-process-segment))
	  (nil    . (telephone-line-minor-mode-segment
		     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
	'((nil    . (telephone-line-misc-info-segment))
	  (accent . (telephone-line-major-mode-segment))
	  (evil   . (telephone-line-airline-position-segment))))
#+end_src

** Icons

All-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

Icons for ivy mode

#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))
#+end_src

** Quality of life

Page break lines

#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t)
#+end_src

Show matching parenthesis

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

Underline current line but disable inside terminal

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'highlight nil)
  (set-face-foreground 'highlight nil)
  (set-face-underline-p 'highlight t)
  (add-hook 'vterm-mode-hook (lambda ()
			      (setq global-hl-line-mode
						  nil)))
#+end_src

#+RESULTS:

Disable toolbar, scrollbar, and menubar

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

Disable blinking cursor and bell ring

#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore)
#+end_src

Enable line number globally but disable in terminal modes

#+begin_src emacs-lisp
  (require 'display-line-numbers)
  (defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
    "Major modes on which to disable the linum mode, exempts them from global requirement."
    :group 'display-line-numbers
    :type 'list
    :version "green")

  (defun display-line-numbers--turn-on ()
    "Turn on line numbers but excempting certain major modes defined in `display-line-numbers-exempt-modes'."
    (if (and
	 (not (member major-mode display-line-numbers-exempt-modes))
	 (not (minibufferp)))
	(display-line-numbers-mode)))
  (global-display-line-numbers-mode)
#+end_src

** Org bullets

Better looking org mode bullet points

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Dashboard

Dashboard intro

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((recents  . 5)
			  (projects . 5)
			  (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-init-info t)
    (setq dashboard-set-file-icons t)
    (setq show-week-agenda-p t)
    (dashboard-setup-startup-hook))
#+end_src


* Navigation

** Evil mode

Vim keybindings

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
#+end_src

Vim-surround

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

Vim commentary

#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

Vim keybindings in Org mode

#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Org mode

Org shortcuts

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Other keybind settings

Rebind universal argument from Emacs C-u to M-u

#+begin_src emacs-lisp
  (define-key global-map "\M-u" nil)
  (define-key global-map "\M-u" 'universal-argument)
#+end_src

Unbind M-r for counsel-recentf
Keybinding is defined below in File/Project jumps

#+begin_src emacs-lisp
  (define-key global-map "\M-r" nil)
#+end_src

Determine keybinding

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :defer t)
#+end_src

Show keys briefly

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

** Text jumps

Jump to character or object

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-:" . avy-goto-char-2)
    ("C-;" . avy-goto-char))
#+end_src

** File/Project jumps

Fuzzy finder for bunch of stuff

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config 
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1)
    :bind (("C-s" . swiper-isearch)
	   ("M-r" . counsel-recentf)
	   ("C-c g" . counsel-git)))

  (use-package counsel
    :ensure t
    :config
    (counsel-mode 1))

  (use-package swiper
    :ensure t
    :defer t)

  (use-package ivy-hydra
    :ensure t
    :defer t)

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

#+end_src

Project manager

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (setq projectile-completion-system 'ivy)
    (setq projectile-project-search-path '("~/Projects/"))
    (projectile-mode 1))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode)
    :bind
    ("C-c p" . projectile-command-map))
#+end_src


* Programming
** Language Server Protocol

LSP-mode with its dependencies
Has some performance optimizations

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (global-company-mode t))

  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-idle-delay 0.500)
    (setq lsp-keymap-prefix "C-c l")
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024))
    :config
    (add-hook 'python-mode-hook #'lsp))

  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))

  (use-package lsp-ui
    :ensure t
    :requires lsp-mode flycheck
    :config
    (setq lsp-ui-sideline-show-diagnostics t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    :commands lsp-ui-mode)
#+end_src

Web-mode for html/css/js

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-css-colorization t)
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))
#+end_src

** Terminal

Terminal for emacs

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t)
#+end_src
** Git

Magit 

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src
