#+TITLE: smRen's Literate Emacs config
#+AUTHOR: smRen
#+EMAIL: smakey18@gmail.com
#+STARTUP: content

* General settings
  Random stuff
  #+begin_src emacs-lisp
    ;; Stop alarms
    (setq ring-bell-function 'ignore)

    ;; Make C-x C-b go to choose buffer
    (global-set-key (kbd "C-x C-b") 'switch-to-buffer)

    ;; Disable lockfile
    (setq create-lockfiles nil)

    ;; Banish customize and don't load
    (setq custom-file (expand-file-name (concat user-emacs-directory "custom.el")))

    ;; Place backup files in different folder
    (setq backup-directory-alist
	      `(("." . ,(concat user-emacs-directory "backups"))))

    ;; Shell variables
    (use-package exec-path-from-shell
      :ensure t
      :config
      (when (daemonp)
      (exec-path-from-shell-initialize)))
  #+end_src

  #+RESULTS:
  : t

  + Stop getting prompts about killing a buffer with a live process
  #+begin_src emacs-lisp
    (setq kill-buffer-query-functions
	  (remq 'process-kill-buffer-query-function
		kill-buffer-query-functions))
  #+end_src

  #+RESULTS:

  + y or n instead of yes or no
  #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src

  #+RESULTS:
  : y-or-n-p

  + Change intro message
  #+begin_src emacs-lisp
    (defun display-startup-echo-area-message ()
  (message "Welcome elite hacker"))
  #+end_src

  #+RESULTS:
  : display-startup-echo-area-message

  Org configs
  #+begin_src emacs-lisp
    ;; Don't ask for confirmation to eval code block
    (setq org-confirm-babel-evaluate nil)

    (setq org-edit-src-tab-acts-natively t)

    ;; Edit source code in current window
    (setq org-src-window-setup 'split-window-below)
  #+end_src

  #+RESULTS:
  : split-window-below

* UI
  #+begin_src emacs-lisp
    ;; Line scrolling
    ;; (setq scroll-conservatively 101
    ;;       scroll-preserve-screen-position 1)
    ;; (require 'view)
    ;; (global-set-key (kbd "C-v") 'View-scroll-half-page-forward)
    ;; (global-set-key (kbd "M-v") 'View-scroll-half-page-backward)
    (setq scroll-conservatively 101)

    ;; Show matching parenthesis
    (show-paren-mode 1)

    ;; Disable toolbar, menubar, and scrollbar
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    ;; Display line numbers
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)

    (use-package counsel
      :ensure t
      :after ivy
      :config (counsel-mode))

    (use-package ivy
      :ensure t
      :config
      (global-set-key (kbd "C-x C-r") 'counsel-recentf)
      (global-set-key (kbd "C-x C-d") 'counsel-dired)
      (global-set-key (kbd "C-c t") 'counsel-load-theme)
      (ivy-mode))

    (use-package ivy-rich
      :ensure t
      :config
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
      (ivy-rich-mode))

    ;; EMOJIS
    (use-package emojify
      :ensure t
      :hook (after-init . global-emojify-mode))


    ;; Company emoji
    (use-package company-emoji
      :ensure t
      :config
      (add-to-list 'company-backends 'company-emoji)
	(defun --set-emoji-font (frame)
	"Adjust the font settings of FRAME so Emacs can display emoji properly."
	(if (eq system-type 'darwin)
	    ;; For NS/Cocoa
	    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
	    ;; For Linux
	    (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

	;; For when Emacs is started in GUI mode:
	(--set-emoji-font nil)
	;; Hook for when a frame is created with emacsclient
	;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
	(add-hook 'after-make-frame-functions '--set-emoji-font)
      )
  #+end_src

  #+RESULTS:
  : t

* Themes
  #+begin_src emacs-lisp
    ;;(load-theme 'wombat)
    (use-package ayu-theme
      :ensure t
      :config (load-theme 'ayu-dark t))


    (use-package minions
      :ensure t
      :config (minions-mode))

    (use-package mood-line
      :ensure t
      :config (mood-line-mode))
  #+end_src

  #+RESULTS:
  : t
  
* Utility Packages
  #+begin_src emacs-lisp
    ;; Show key hints
    (use-package which-key
      :ensure t
      :init
      :config (which-key-mode))

    ;; Evil (VIM) mode
    (use-package evil
      :ensure t
      :init
      (define-key global-map "\M-u" nil)
      (define-key global-map "\M-u" 'universal-argument)
      (add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q")))
      (add-hook 'evil-normal-state-entry-hook (lambda () (send-string-to-terminal "\033[0 q")))
      (setq evil-want-C-u-scroll t
	    evil-esc-delay 0
	    evil-want-keybinding nil)
      :config (evil-mode))

    (use-package evil-collection
      :ensure t
      :after evil
      :init
      (evil-collection-init))

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode))

    (use-package evil-matchit
      :ensure t
      :config
      (global-evil-matchit-mode 1))

    (use-package evil-commentary
      :ensure t
      :config
      (evil-commentary-mode))


    ;; Company completion
    (use-package company
      :ensure t
      :config
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)
      (setq company-idle-delay 0
	    company-minimum-prefix-length 1
	    company-selection-wrap-around t
	    company-echo-delay 0)
      (global-company-mode))

    ;; Flycheck
    (use-package flycheck
      :ensure t
      :init
      (defun disable-fylcheck-in-org-src-block ()
	(setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
      (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
      :config
      (global-flycheck-mode))

    ;; LSP mode
    (use-package lsp-mode
      :ensure t
      :init
      (setq gc-cons-threshold 100000000
	    read-process-output-max (* 1024 1024)
	    lsp-idle-delay 0.500
	    lsp-log-io nil) ;; 1mb
      :hook (
	     (js-mode . lsp-deferred)
	     (python-mode . lsp-deferred)
	     (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred))

    ;; Lsp Ui for checking
    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-completion-show-detail t
	    lsp-ui-doc-enable nil))

    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)

    (use-package lsp-pyright
      :ensure t)

    (use-package yasnippet
      :ensure t
      :config
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode))

    (use-package yasnippet-snippets
      :ensure t)

    (use-package general
      :ensure t
      :config
      (general-define-key
       :states '(normal visual insert emacs)
       :prefix "SPC"
       :non-normal-prefix "C-SPC"

       ;; Apps
       "a" '(:ignore t :which-key "Applications")
       "ad" 'dired
       "av" 'vterm-other-window

       ;; Avy
       "f" 'avy-goto-char-2

       ;; Code stuff
       "l" '(:ignore t :which-key "LSP")
       "lr" 'lsp-workspace-restart
       "lg" 'lsp-ui-doc-glance
       "lf" 'format-all-buffer))


    (use-package vterm
      :ensure t)

    (use-package avy
      :ensure t)

    (use-package python
      :ensure t
      :config
      (setq python-indent-guess-indent-offset-verbose nil))

    (use-package format-all
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'format-all-mode)
      (add-hook 'format-all-mode-hook 'format-all-ensure-formatter))

    (use-package tree-sitter
      :ensure t
      :init
      (global-tree-sitter-mode)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

    (use-package tree-sitter-langs
      :ensure t)

    (use-package json-mode
      :ensure t)

    ;; (use-package web-mode
    ;;   :ensure t
    ;;   :config
    ;;   (setq web-mode-markup-indent-offset 2)
    ;;   (setq web-mode-css-indent-offset 2)
    ;;   (setq web-mode-code-indent-offset 2)
    ;;   (setq web-mode-enable-css-colorization t)
    ;;   (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    ;;   (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))
  #+end_src

  #+RESULTS:
  : t

* Custom functions
  #+BEGIN_SRC emacs-lisp
    ;; Function for shutdown emacs server instance
    (defun server-shutdown ()
      "Save buffers, Quit, and Shutdown (kill) server"
      (interactive)
      (save-some-buffers)
      (Kill-emacs))
  #+END_SRC

  #+RESULTS:
  : server-shutdown
